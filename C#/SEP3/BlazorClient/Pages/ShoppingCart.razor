@page "/ShoppingCart"
@using global::Shared
@using BlazorClient.Services.ClientInterfaces
@using global::Shared.DTOs
@inject IOrderItemService orderItemService
@inject NavigationManager navMgr;

@if (!string.IsNullOrEmpty(msg))
            {
                <div>
                    <span>@msg</span>
                </div>
            }
@if (orderItems == null)
            {
                <span>Loading..</span>
            }
            else if (!orderItems.Any())
            {
                <span>No products to be found in your shopping cart</span>
            }
            else
            {
                <div class="card">
                    <div class="row">
                        <div class="col-md-8 cart">
                            <div class="title">
                                <div class="row">
                                    <div class="col"><h4><b>Shopping Cart</b></h4></div>
                                    <div class="col align-self-center text-right text-muted">@orderItems.Count() items</div>
                                </div>
                            </div>




                            <div class="order-container">
                                @foreach (OrderItem orderItem in orderItems)
                                {
                                    <div class="row border-top border-bottom">
                                        <div class="row main align-items-center">
                                            <div class="col-2"><img class="card-img-top img-thumbnail"  src=@orderItem.product.image alt="Card image cap"></div>
                                            <div class="col">
                                                <div class="row text-muted">@orderItem.product.name</div>
                                                <div class="row">@orderItem.product.description</div>
                                            </div>
                                            <div class="col">
                                                <a href="#" @onclick="@(() => decrease(orderItem.id))">-</a><a href="#" class="border">@orderItem.quantity</a><a href="#" @onclick="@(() => increase(orderItem.id, orderItem.product.stock))">+</a>
                                            </div>
                                            <div class="col">&euro; @orderItem.price <Button class="oi oi-x" @onclick="@(() => removeItem(orderItem.id))"></Button></div>
                                        </div>
                                    </div>
                                }
                            </div>

                        </div>

                        <div class="col-md-4 summary">
                            <div><h5><b>Summary</b></h5></div>
                            <hr>
                            <div class="row">
                                <div class="col" style="padding-left:0;">ITEMS @orderItems.Count()</div>
                                <div class="col text-right">&euro; 132.00</div>
                            </div>
                            <form>
                                <p>SHIPPING</p>
                                <select><option class="text-muted">Standard-Delivery- &euro;5.00</option></select>
                                <p>GIVE CODE</p>
                                <input id="code" placeholder="Enter your code">
                            </form>
                            <div class="row" style="border-top: 1px solid rgba(0,0,0,.1); padding: 2vh 0;">
                                <div class="col">TOTAL PRICE</div>
                                <div class="col text-right">&euro; 137.00</div>
                            </div>
                            <button class="btn"  @onclick="@(() => navMgr.NavigateTo("/Checkout"))">CHECKOUT</button>
                        </div>
                    </div>

                </div>

            }
@code {
    public static IEnumerable<OrderItem>? orderItems;
    private static IEnumerable<OrderItem>? staticOrderItems;
    private OrderItem[]? list;
    private string msg = "";
    private static string message = "";
    private OrderItemUpdateDto dto = null!;
    private OrderItem orderItem= null!;

    protected override async Task OnInitializedAsync()
    {
        msg = "";
        try
        {
            orderItems = await orderItemService.GetNotBoughtOrderItems();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }

        
        
    }
    
    private async Task removeItem(long id)
    {
        msg = "";
        try
        {
            await orderItemService.DeleteAsync(id);
        
            var list1 = new List<OrderItem>(orderItems!);
            list1.RemoveAll(orderItem => orderItem.id == id);
            orderItems = list1.AsEnumerable();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private async Task decrease(long id)
    {
        msg = "";
        try
        {
            OrderItemCreationDto creationDto = await orderItemService.GetByIdAsync(id);
            if (creationDto.quantity > 0)
            {
                dto = new(id)
                {
                    quantity = (creationDto.quantity - 1),
                    id = id
                };
                await orderItemService.UpdateAsync(dto);
                if (dto.quantity== 0 )
                            {
                                await orderItemService.DeleteAsync(id);
                            }
                navMgr.NavigateTo("/ShoppingCart");
            }
            
            
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private async Task increase(long id, int stock)
    {
     
        msg = "";
        try
        {

            OrderItemCreationDto creationDto = await orderItemService.GetByIdAsync(id);
            if (creationDto.quantity < stock) 
            {
                dto = new(id)
                {
                    quantity = (creationDto.quantity + 1),
                    id = id
                };
                await orderItemService.UpdateAsync(dto);
                navMgr.NavigateTo("/ShoppingCart");
            }
            else if (creationDto.quantity==stock)
            {
                navMgr.NavigateTo("/ShoppingCart");
            }

        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }   
    }
}