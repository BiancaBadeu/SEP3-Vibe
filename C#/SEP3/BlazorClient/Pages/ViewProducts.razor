@page "/ViewProducts"
@using HttpClients.ClientInterfaces
@using global::Shared
@using global::Shared.DTOs
@inject IProductService productService
@inject IOrderItemService orderItemService
@inject HttpClient Http
@inject NavigationManager navMgr

<h3>ViewProducts</h3>

@if (!string.IsNullOrEmpty(msg))
{
    <div>
        <span>@msg</span>
    </div>
}

@if (products == null)
{
    <span>Loading..</span>
}
else if (!products.Any())
{
    <span>No products to be found</span>
}
else
{
    <div class="users-container">
        @foreach (Product product in products)
        {
            <div class="product-card">
                <img class="card-img-top" src="..." alt="Card image cap">
                <div class="card-body">
                    <label @bind="productName">@product.name</label>
                    <p class="card-text">@product.description</p>
                    <select class="custom-select" id="inputGroupSelect04">
                        <option value="1" @bind="selectedQuantity">1</option>
                        </select>
                    <a href="#" class="btn btn-primary" @onclick="AddToCart"
                       >Add to Cart</a>
                </div>
                
            </div>
        }
        
  
  
</div>
        
   
}

@code {
    private IEnumerable<Product>? products;
    private Product[]? list;
    private string productName = "";
    private int selectedQuantity;
    private string msg = "";

    protected override async Task OnInitializedAsync()
    {
        msg = "";
        try
        {
            products = await productService.GetProducts();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private async void AddToCart()
    {
        msg = "";

        try
        {
            Product productCart = new Product();
            @foreach (Product product in products)
            {
                if (product.name.Equals(productName))
                {
                    productCart = product;
                }
            }
            OrderItemCreationDto dto= new OrderItemCreationDto(productCart,selectedQuantity, (productCart.price*selectedQuantity));
            await orderItemService.OrderProduct(dto);
            navMgr.NavigateTo("/OrderItems");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
}