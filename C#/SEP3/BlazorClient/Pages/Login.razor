
@page "/login"
@using BlazorClient.Services.ClientInterfaces
@using global::Shared.DTOs
@using BlazorClient.Services
@inject IUserService userService;
@inject IAuthService authService;
@inject NavigationManager navMgr;


@using System.Text.RegularExpressions
@using InputType = MudBlazor.InputType

<BSRow MarginTop="Margins.Small" MarginLeftAndRight="Margins.Small">
    <BSCol Column="6" ><BSCard Color="BSColor.Dark" Alignment="Alignment.Center">
            <BSCard CardType="CardType.Title" class="fw-bolder" style="color: white"><h3>Register</h3></BSCard>
            <MudPaper Class="border-solid border-2 border-dark " >
                <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors" Style="color: whitesmoke" >
                    <MudTextField T="string" Label="Name" Required="true" RequiredError="Name is required!" @bind-Value="name"/>
                    <MudTextField T="string" Label="Phone Number" Required="true" RequiredError="Phone Number is required!" @bind-Value="phoneNumber"/>
                    <MudTextField T="string" Label="Username" Required="true" RequiredError="User name is required!" @bind-Value="username"/>

                    <MudTextField T="string" Label="Password" HelperText="Choose a strong password" @ref="pwField1" @bind-Value="pw1"
                                  InputType="InputType.Password"
                                  Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"/>
                    <MudTextField T="string"
                                  Label="Password" HelperText="Repeat the password" InputType="InputType.Password" @ref="pwField2" @bind-Value="pw2"
                                  Validation="@(new Func<string, string>(PasswordMatch))"/>

                    <div class="d-flex align-center justify-space-between">
                        <MudButton Variant="Variant.Filled" @onclick="Create" Color="Color.Dark" Disabled="@(!success)" Class="ml-auto">Register</MudButton>
                    </div>
                </MudForm>
            </MudPaper>
            <MudPaper>
                <MudText Typo="Typo.subtitle2">@($"Errors ({errors.Length})")</MudText>
                @foreach (var error in errors)
                {
                    <MudText Color="@Color.Error">@error</MudText>
                }

                @if (!string.IsNullOrEmpty(resultMsg))
                {
                    <label style="color: @color">@resultMsg</label>
                }
            </MudPaper>
        </BSCard>
    </BSCol>
    
    
    
    <BSCol Column="6"><BSCard Color="BSColor.Dark"  >
            <BSCard CardType="CardType.Title" Class="fw-bolder" style="color: white" Alignment="Alignment.Center"><h3>Log-in</h3></BSCard>
            <MudPaper Class="border-solid border-2 border-dark" >
                <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors" Style="color: whitesmoke">
                    <MudTextField T="string" Label="Username" Required="true" RequiredError="User name is required!" @bind-Value="usernameLog"/>
                    <MudTextField T="string" Label="Password" HelperText="Choose a strong password"  @bind-Value="passwordLog"
                                  InputType="InputType.Password"
                                  Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"/>

                    <div class="d-flex align-center justify-space-between">
                        <MudButton Variant="Variant.Filled" @onclick="LoginAsync" Color="Color.Dark" Disabled="@(!success)" Class="ml-auto">Login</MudButton>
                    </div>
                </MudForm>
            </MudPaper>
            <MudPaper>
                <MudText Typo="Typo.subtitle2">@($"Errors ({errors.Length})")</MudText>
                @foreach (var error in errors)
                {
                    <MudText Color="@Color.Error">@error</MudText>
                }

                @if (!string.IsNullOrEmpty(resultMsg))
                {
                    <label style="color: @color">@resultMsg</label>
                }
            </MudPaper>
        </BSCard>
    </BSCol>
    
</BSRow>
@code {
    private bool success;
    private string[] errors = { };
    private string name;
    private string phoneNumber;
    private string username;
    MudTextField<string>  pwField1;
    MudTextField<string>  pwField2;
    private string password;
    private string usernameLog;
    private string passwordLog;
    private string passwordLog2;
    private string pw1;
    private string pw2;
    private string resultMsg = "";
    private string msg = "";
    private string color = "";
    MudForm form;


    
    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }

    private string PasswordMatch(string arg)
    {
        if (pwField1.Value != arg)
            return "Passwords don't match";
        return null;
    }
    

    private async Task Create()
    {
        resultMsg = "";
        password = pwField1.Value;
        

        try
        {
            await userService.Create(new UserCreationDto(name, phoneNumber, username, password));
            name = "";
            phoneNumber = "";
            username = "";
            password = "";
            pw1 = "";
            pw2 = "";
            resultMsg = "User successfully created";
            color = "green";
            
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            resultMsg = e.Message;
            color = "red";
        }
    }
    
    private async Task LoginAsync()
    {
        resultMsg = "";
        try
        {
            await authService.LoginAsync(usernameLog, passwordLog);
            navMgr.NavigateTo("/ViewProducts");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = $"Error: {e.Message}";
        }
    }
    
    
}

