@page "/Checkout"
@using global::Shared
@using BlazorClient.Services.ClientInterfaces
@using global::Shared.DTOs
@using Size = MudBlazor.Size
@using Align = MudBlazor.Align
@using Justify = MudBlazor.Justify
@inject IOrderItemService orderItemService
@inject IOrderService orderService
@inject IReceiptService receiptService
@inject IProductService productService;
@inject NavigationManager navMgr

@if (!string.IsNullOrEmpty(msg))
            {
                <div>
                    <span>@msg</span>
                </div>
            }
@if (orderItems == null)
            {
                <span>Loading..</span>
            }
            else if (!orderItems.Any())
            {
                <span>No products to be found in your shopping cart</span>
            }
            else
            {
                <MudContainer Class="mt-5 d-flex" MaxWidth="MaxWidth.Medium">
                    <MudGrid Spacing="10" Justify="Justify.Center" Class="mt-5 ">
                        
                        <MudItem xs="6">
                            <MudText Typo="Typo.h5" GutterBottom="true">Billing address</MudText>
                            <MudGrid>
                                <MudItem xs="12">
                                    <MudItem>
                                        <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                                            <MudTextField T="string" Label="street" Required="true" RequiredError="Street is required!" @bind-Value="@street"/>
                                            <MudTextField T="string" Label="city" Required="true" RequiredError="City is required!" @bind-Value="@city"/>
                                            <MudTextField T="string" Label="zip" Required="true" RequiredError="Zip code is required!" @bind-Value="@zip"/>



                                            <div class="d-flex align-center justify-space-between">
                                                <MudButton @onclick="MakeOrder" Variant="Variant.Filled" Color="Color.Dark" Disabled="@(!success)" Class="ml-auto">Order</MudButton>

                                            </div>
                                        </MudForm>
                                    </MudItem>
                                    <MudPaper Class="pa-4 mt-4">
                                        <MudButton Variant="Variant.Filled" Color="Color.Dark" DisableElevation="true" OnClick="@(() => form.Reset())" Class="mx-2">Reset</MudButton>
                                    </MudPaper>
                                </MudItem>
                                <MudItem xs="12" sm="5">
                                    <MudPaper Class="pa-4 mud-height-full">
                                        <MudText Typo="Typo.subtitle2">@($"Errors ({errors.Length})")</MudText>
                                        @foreach (var error in errors)
                                        {
                                            <MudText Color="@Color.Error">@error</MudText>
                                        }
                                    </MudPaper>
                                </MudItem>
                                
                            </MudGrid>
                        </MudItem>
                        
                        
                        <MudItem xs="6">
                            <MudText Typo="Typo.h5" GutterBottom="true">Cart</MudText>
                            <MudPaper Class="d-flex flex-column" Style="height:50%;" Outlined="true">
                                <MudText>ITEMS: @orderItems.Count()</MudText>
                                <MudList Style="overflow-y: scroll">
                                    @foreach (OrderItem orderItem in orderItems)
                                    {
                                        <MudListItem>
                                            <div class="d-flex">
                                                <MudAvatar Image="@orderItem.product.image"/>
                                                <MudText Class="mx-1">@orderItem.product.name</MudText>
                                                <MudText Class="mx-2" Inline="true"> x @orderItem.quantity</MudText>
                                                <MudText class="mx-1" Inline="true">&euro; @orderItem.price</MudText>
                                            </div>
                                        </MudListItem>
                                    }

                                </MudList>
                                <div class="mt-auto">
                                    <MudDivider/>
                                    <div class="d-flex pa-4">
                                        <MudText>Total:</MudText>
                                        <MudText Class="ml-auto"><b>&euro; @price</b></MudText>
                                    </div>
                                </div>
                            </MudPaper>
                        </MudItem>
                    </MudGrid>
                </MudContainer>

            }

@code {
    private IEnumerable<OrderItem>? orderItems;
    private OrderItem[]? list;
    private string msg = "";
    private string street = "";
    private string city = "";
    private string zip = "";
    private string address = "";
    private double price;
    private bool showModal;
    private Order order = null;
    private Receipt receipt = null;
    private bool success;
    private string[] errors = { };
    MudForm form;
    
    private User userTest = new User()
    {
        username = "Ana",
        name = "Ana"
    };
    
    protected override async Task OnInitializedAsync()
    {
        msg = "";
        try
        {
            orderItems = await orderItemService.GetNotBoughtOrderItems();
            foreach (var order in orderItems)
            {
                price += order.price;
            }
            price = ShoppingCart.TotalPrice;
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    public async Task MakeOrder()
    {
        msg = "";
        try
        {
            List<long> items = new List<long>();
            foreach (var order in orderItems)
            {
                items.Add(order.id);
            }
            address = street + " " + city + " " + zip;

            OrderCreationDto dto = new OrderCreationDto(address, items, ShoppingCart.TotalPrice);
            order=await orderService.CreateAsync(dto);
            ReceiptCreationDto receiptDto = new ReceiptCreationDto(userTest.username, order.Id);
            receipt = await receiptService.CreateAsync(receiptDto);
            await DeleteShoppingCartAndUpdateStock();
            navMgr.NavigateTo("/PurchaseHistory");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

    private async Task DeleteShoppingCartAndUpdateStock()
    {
        List<OrderItem> orderItemsList = ShoppingCart.orderItems.ToList();
        for (int i = 0; i < orderItemsList.Count; i++)
        {
            int stock = orderItemsList[i].product.stock - orderItemsList[i].quantity;
            ProductUpdateDto dtoProduct = new ProductUpdateDto(orderItemsList[i].product.id, stock);
            await productService.UpdateAsync(dtoProduct);
            OrderItemUpdateDto dto = new OrderItemUpdateDto(orderItemsList[i].id, orderItemsList[i].quantity, true);
            await orderItemService.SetOrderItemToBought(dto);
        }
        ShoppingCart.orderItems = new List<OrderItem>();
    }

    
    
}