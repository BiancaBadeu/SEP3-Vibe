@page "/EditProductPage/{id:long}"
@using global::Shared.DTOs
@using BlazorClient.Services.ClientInterfaces
@inject IProductService productService
@inject NavigationManager navMgr

<BSCard Color="BSColor.Dark" Alignment="Alignment.Center">
    <BSCard CardType="CardType.Title" class="fw-bolder" style="color: white"><h3>Edit Product</h3></BSCard>
    <MudPaper Class="border-solid border-2 border-dark">
        <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors" Style="
        color: whitesmoke">
            <MudTextField T="string" Label="name" Required="true" RequiredError="Name is required!" @bind-Value="currentProduct.name"/>
            <MudTextField T="string" Label="description" Required="true" RequiredError="Description is required!" @bind-Value="currentProduct.description"/>
            <MudTextField T="double?" Label="price" Required="true" RequiredError="Price is required!" @bind-Value="currentProduct.price"/>
            <MudTextField T="string" Label="ingredients" Required="true" RequiredError="Ingredients are required!" @bind-Value="currentProduct.ingredients"/>
            <MudTextField T="string" Label="categoryName" Required="true" RequiredError="Category is required!" @bind-Value="currentProduct.categoryName"/>
            
            
            <div class="d-flex align-center justify-space-between">
                <MudButton Variant="Variant.Filled" @onclick="EditProduct" Color="Color.Dark" Disabled="@(!success)" Class="ml-auto">Save Changes</MudButton>
            </div>
        </MudForm>
    </MudPaper>
    <MudPaper>
        <MudText Typo="Typo.subtitle2">@($"Errors ({errors.Length})")</MudText>
        @foreach (var error in errors)
        {
            <MudText Color="@Color.Error">@error</MudText>
        }
            
        @if (!string.IsNullOrEmpty(resultMsg))
        {
            <label style="color: @color">@resultMsg</label>
        }
    </MudPaper>
</BSCard>





@code {
    [Parameter]
    public long id { get; set; }
    private bool success;
    private string[] errors = { };
    private string resultMsg = "";
    private string color = "";
    MudForm form;
    
    private string msg = "";
    private ProductAdminUpdateDto currentProduct = new ProductAdminUpdateDto();
    
    protected override async Task OnInitializedAsync()
    {
        msg = "";
        try
        {
            currentProduct= await productService.GetUpdateDtoByIdAsync(id);
           
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
    
    private async void EditProduct()
    {
        try
        {
            if (ValidateData())
            {
                await productService.SaveEditAsync(id, currentProduct.name, currentProduct.description, currentProduct.price, currentProduct.image, currentProduct.ingredients, currentProduct.categoryName);
                navMgr.NavigateTo($"/ProductPage/{id}");
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            resultMsg = e.Message;
            color = "red";
        }
    }

    private bool ValidateData()
    {
        if(currentProduct.price < 1 || currentProduct.price == null)
        {
            resultMsg = "The price is not valid!";
            return false;
        }
        
        return true;
    }
}